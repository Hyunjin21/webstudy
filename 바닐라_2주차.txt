3.0
Momentum을 만들어보자
시계
(css를 하지 않는다 어느정도 진행되면 적용)

항상 작은 부분으로 나눠서 작업한다

function init() {}
init();      //기본 형태

<div class="js-clock"></div> //자바스크립트에서만 다룬다

const clockContainer = document.querySelector(".js-clock"); //js-clock의 자식을 탐색한다
const clockTitle =


<div class="js-clock">
     <h1 class="js-title"></h1>  //<h1>00:00</h1>
</div>        

const clockContainer = document.querySelector(".js-clock"),
   clockTitle = clockContainer.querySelector("h1");
//깔끔하게 정리

현재 시각을 얻는다 - 콘솔창을 이용
const date = new Date()
>>undefined
date
>>Sun Mar 28 2021 17:52:00 GMT+0900 (대한민국 표준시)
date.getDay()
>>0
date.getDate()
>>28
date.getHours()
>>17
date.getMinutes()
>>52



function getTime(){
    const date = new Date(); //여기에서 date는 class 그러나  object라고 생각하기
    const minutes = date.getMinutes();
    const hours = date.getHours();
    const seconds = date.getSeconds();
    clockTitle.innerText = `${hours}:${minutes}:${seconds}`; //innerText 객체 안에 텍스트를 넣기 위해서 사용
}
function init() {
    getTime(); 
}
init();

3.1
setInterval을 본다
setInterval(fn, 1000)
첫번째 인자로 실행할 함수를 받고 그리고 그 함수를 실행하고 싶은 시간
첫번째 인자는 함수 두번째 인자는 실행할 시간 간격

function sayHi(){console.log("say hi")}
sayHi()
>>say hi 

초는 millisecond 기준 3초는 3000
setInterval(sayHi, 3000)
1
say hi

function init() {
    getTime(); 
    setInterval(getTime, 1000); //매초마다
}

0에서 10으로 바뀔 때 우리가 고쳐야 할 부분이다
만약 숫자가 10보다 작으면 그 앞에 0을 넣는다
ternary operator(삼항연산자)
작은 if
seconds 대신 조건을 넣는다

clockTitle.innerText = `${hours < 10 ? `0${hours}` : hours}:${
        minutes < 10 ? `0${minutes}` : minutes
    }:${seconds < 10 ? `0${seconds}` : seconds 
    }`; 
}

3.2
그 사람의 컴퓨터에 저장해보자
<form class="js-form">   
   <input type="text" placeholder="What is your name?" />
</form> 

querySelector은 찾은 첫번째것을 가져온다
querySelectorAll은 모든 걸 가져온다
클래스명에 따른 element들을 가져오는데 이건 array를 준다

.local storage
작은 (자바스크립트)정보를 유저 컴퓨터에 저장하는 방법

null 존재하지 않음 undefined cannot find 같은 

만약 현재 유저가 null이 아니라면
색칠하자
만약 텍스트를 색칠할거면 폼을 숨겨야 한다
const form = document.querySelector(".js-form"),
     input = form.querySelector("input");
     greeting = document.querySelector(".js-greetings");

const USER_LS = "currentUser",
   SHOWING_CN = "showing";

function paintGreeting(text){
    form.classList.remove(SHOWING_CN);
    greeting.classList.add(SHOWING_CN);
    greeting.innerText = `Hello ${text}`
}
function loadName(){
    const currentUser = localStorage.getItem(USER_LS);
    if (cureentUser === null){
        // she is not
    } else {
        paintGreeting(currentUser);  // she is  
    }
}

3.3
유저가 있으면 동작 
유저가 엔터를 눌렀을 때 알아차리길 원하므로 form에 제출

event의 preventDefault
보통 event가 발생하면 root에서 일어나고 form에서 일어난다
엔터를 누르면 페이지가 새로고침된다.
->이 이벤트의 기본 동작을 막고 싶다
preventDefault //이벤트 금지

function handleSubmit(event){
    event.preventDefault();
    const currentValue = input.value;
    console.log(currentValue);
}
//현재 value가 console에 나온다

function handleSubmit(event){
    event.preventDefault();
    const currentValue = input.value;
    paintGreeting(currentValue);
}
->새로고침하면 기억을 못한다 저장하지 않았기 때문

